"""
DC Bias (Rodeostat) + AC EIS Measurement (Red Pitaya)
Dominic Morris, 2025
Requirements:
pip install potentiostat pyserial pyrpl numpy matplotlib
"""

import time
import numpy as np
import matplotlib.pyplot as plt
from potentiostat import Potentiostat
from pyrpl import Pyrpl
import os

# ==============================================================================================
# Rodeostat Setup: DC Bias Only
# ==============================================================================================
def setup_rodeostat(port='COM3', dc_bias=0.5):
    dev = Potentiostat(port)
    dev.set_curr_range('100uA')
    dev.set_sample_rate(100.0)

    # Configure a constant voltage test (DC bias)
    test_name = 'constant'
    params = {
        'quietValue': dc_bias,
        'quietTime': 0,        # Seconds
        'amplitude': 0,        # No sweep
        'offset': dc_bias,     # V
        'period': 1000,        # Arbitrary, only single step
        'numCycles': 1,
        'shift': 0
    }
    dev.set_param(test_name, params)
    return dev, test_name

# ==============================================================================================
# Red Pitaya Setup: AC + Measurement
# ==============================================================================================
class RedPitayaEIS:
    def __init__(self, hostname='169.254.131.37', output_dir='eis_data'):
        self.rp = Pyrpl(config='lockin_config', hostname=hostname)
        self.output_dir = output_dir
        self.rp_modules = self.rp.rp
        self.lia_scope = self.rp_modules.scope
        self.lia_scope.input1 = 'iq2'
        self.lia_scope.input2 = 'iq2_2'
        self.lia_scope.decimation = 8192
        self.lia_scope._start_acquisition_rolling_mode()
        self.lia_scope.average = 'true'
        self.sample_rate = 125e6/self.lia_scope.decimation
        self.iq2 = self.rp_modules.iq2

    def setup_ac(self, params):
        # AC excitation signal
        self.test_sig = self.rp_modules.asg0
        self.test_sig.setup(waveform='sin',
                            frequency=params['test_freq'],
                            amplitude=params['test_amp'],
                            offset=0.0,
                            output_direct='out1',
                            trigger_source='immediately')

        # Optional test noise
        self.test_noise = self.rp_modules.asg1
        self.test_noise.setup(waveform='sin',
                              frequency=params['noise_freq'],
                              amplitude=params['noise_amp'],
                              offset=0.0,
                              output_direct='out1',
                              trigger_source='immediately')

        # Lock-in configuration
        self.iq2.setup(frequency=params['ref_freq'],
                       bandwidth=[-params['ref_freq']*2, -params['ref_freq'], params['ref_freq'], params['ref_freq']*2],
                       gain=1.0,
                       phase=0,
                       acbandwidth=0,
                       amplitude=params['ref_amp'],
                       input='in1',
                       output_direct='out2',
                       output_signal='quadrature',
                       quadrature_factor=20)

    def capture(self):
        self.lia_scope.single()
        ch1 = np.array(self.lia_scope._data_ch1_current)
        ch2 = np.array(self.lia_scope._data_ch2_current)
        return ch1, ch2

    def run(self, params, save_file=False):
        self.setup_ac(params)
        time.sleep(0.01)

        # Capture lock-in outputs
        X, Y = self.capture()
        t = np.arange(0, len(X)/self.sample_rate, 1/self.sample_rate)

        # Plot results
        plt.figure()
        plt.plot(t, X, label='X')
        plt.plot(t, Y, label='Y')
        plt.xlabel('Time (s)')
        plt.ylabel('Lock-in outputs')
        plt.title('Red Pitaya AC Measurement')
        plt.legend()
        plt.grid(True)
        plt.tight_layout()
        if save_file:
            if not os.path.exists(self.output_dir):
                os.makedirs(self.output_dir)
            plt.savefig(os.path.join(self.output_dir, 'eis_measurement.png'))
        plt.show()

# ==============================================================================================
# MAIN: Run Both Devices Together
# ==============================================================================================
if __name__ == "__main__":
    # --- Rodeostat DC bias ---
    rodeostat_port = 'COM3'  # change as needed
    dc_voltage = 0.5         # DC bias in volts
    dev, test_name = setup_rodeostat(rodeostat_port, dc_voltage)

    print(f"Applying DC bias of {dc_voltage} V with Rodeostat...")
    # Start DC bias in background
    dev.run_test(test_name, display=None, filename=None)

    # --- Red Pitaya AC measurement ---
    rp_params = {
        'test_freq': 100,    # Hz AC excitation
        'test_amp': 0.01,    # V AC amplitude
        'noise_freq': 10000, # Hz optional noise
        'noise_amp': 0.0,    # V optional noise amplitude
        'ref_freq': 100,     # Hz reference
        'ref_amp': 0.01      # V reference amplitude
    }

    print("Starting AC measurement with Red Pitaya...")
    rp = RedPitayaEIS()
    rp.run(rp_params, save_file=True)

    print("Experiment complete!")
